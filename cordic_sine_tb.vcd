$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module cordic_tb_helper $end
  $var real 64 6$ K $end
  $var real 64 W# PI $end
 $upscope $end
 $scope module cordic_sine_tb $end
  $var wire 32 P# CLOCK_PERIOD [31:0] $end
  $var wire 32 Q# ITERATIONS [31:0] $end
  $var wire 1 J# clk $end
  $var wire 1 K# reset $end
  $var wire 1 L# start $end
  $var wire 32 M# angle [31:0] $end
  $var wire 1 # ready $end
  $var wire 1 $ done $end
  $var wire 32 % value [31:0] $end
  $scope module dut $end
   $var wire 32 Q# BIT_WIDTH [31:0] $end
   $var wire 32 Q# ITERATIONS [31:0] $end
   $var wire 1 J# clk $end
   $var wire 1 K# reset $end
   $var wire 1 L# start $end
   $var wire 32 M# angle [31:0] $end
   $var wire 32 % value [31:0] $end
   $var wire 1 # ready $end
   $var wire 1 $ done $end
   $var wire 32 R# K [31:0] $end
   $var wire 32 & cordic_out [31:0] $end
   $var wire 1 S# cordic_ready $end
   $var wire 1 ' cordic_done $end
   $scope module cordic_module $end
    $var wire 32 Q# BIT_WIDTH [31:0] $end
    $var wire 32 Q# ITERATIONS [31:0] $end
    $var wire 1 J# clk $end
    $var wire 1 K# reset $end
    $var wire 1 L# start $end
    $var wire 1 T# mode $end
    $var wire 32 M# in_angle [31:0] $end
    $var wire 32 U# in_x [31:0] $end
    $var wire 32 V# in_y [31:0] $end
    $var wire 32 ( out_angle [31:0] $end
    $var wire 32 ) out_x [31:0] $end
    $var wire 32 & out_y [31:0] $end
    $var wire 1 S# ready $end
    $var wire 1 ' done $end
    $var real 64 W# PI $end
    $var wire 1 N# pause $end
    $var wire 33 * last_current_angle [32:0] $end
    $scope module genblk1[0] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 Y# STEP [31:0] $end
      $var wire 32 V# SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 M# in_target_angle [31:0] $end
      $var wire 33 Z# in_current_angle [32:0] $end
      $var wire 32 U# in_x [31:0] $end
      $var wire 32 V# in_y [31:0] $end
      $var wire 1 T# in_mode $end
      $var wire 1 L# in_done $end
      $var wire 32 , out_target_angle [31:0] $end
      $var wire 33 - out_current_angle [32:0] $end
      $var wire 32 / out_x [31:0] $end
      $var wire 32 0 out_y [31:0] $end
      $var wire 1 1 out_mode $end
      $var wire 1 2 out_done $end
      $var wire 1 O# rotation_dir $end
      $var wire 32 U# shifted_x [31:0] $end
      $var wire 32 V# shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[10] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 \# STEP [31:0] $end
      $var wire 32 ]# SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 3 in_target_angle [31:0] $end
      $var wire 33 4 in_current_angle [32:0] $end
      $var wire 32 6 in_x [31:0] $end
      $var wire 32 7 in_y [31:0] $end
      $var wire 1 8 in_mode $end
      $var wire 1 9 in_done $end
      $var wire 32 : out_target_angle [31:0] $end
      $var wire 33 ; out_current_angle [32:0] $end
      $var wire 32 = out_x [31:0] $end
      $var wire 32 > out_y [31:0] $end
      $var wire 1 ? out_mode $end
      $var wire 1 @ out_done $end
      $var wire 1 A rotation_dir $end
      $var wire 32 B shifted_x [31:0] $end
      $var wire 32 C shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[11] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 ^# STEP [31:0] $end
      $var wire 32 _# SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 : in_target_angle [31:0] $end
      $var wire 33 ; in_current_angle [32:0] $end
      $var wire 32 = in_x [31:0] $end
      $var wire 32 > in_y [31:0] $end
      $var wire 1 ? in_mode $end
      $var wire 1 @ in_done $end
      $var wire 32 D out_target_angle [31:0] $end
      $var wire 33 E out_current_angle [32:0] $end
      $var wire 32 G out_x [31:0] $end
      $var wire 32 H out_y [31:0] $end
      $var wire 1 I out_mode $end
      $var wire 1 J out_done $end
      $var wire 1 K rotation_dir $end
      $var wire 32 L shifted_x [31:0] $end
      $var wire 32 M shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[12] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 `# STEP [31:0] $end
      $var wire 32 a# SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 D in_target_angle [31:0] $end
      $var wire 33 E in_current_angle [32:0] $end
      $var wire 32 G in_x [31:0] $end
      $var wire 32 H in_y [31:0] $end
      $var wire 1 I in_mode $end
      $var wire 1 J in_done $end
      $var wire 32 N out_target_angle [31:0] $end
      $var wire 33 O out_current_angle [32:0] $end
      $var wire 32 Q out_x [31:0] $end
      $var wire 32 R out_y [31:0] $end
      $var wire 1 S out_mode $end
      $var wire 1 T out_done $end
      $var wire 1 U rotation_dir $end
      $var wire 32 V shifted_x [31:0] $end
      $var wire 32 W shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[13] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 b# STEP [31:0] $end
      $var wire 32 c# SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 N in_target_angle [31:0] $end
      $var wire 33 O in_current_angle [32:0] $end
      $var wire 32 Q in_x [31:0] $end
      $var wire 32 R in_y [31:0] $end
      $var wire 1 S in_mode $end
      $var wire 1 T in_done $end
      $var wire 32 X out_target_angle [31:0] $end
      $var wire 33 Y out_current_angle [32:0] $end
      $var wire 32 [ out_x [31:0] $end
      $var wire 32 \ out_y [31:0] $end
      $var wire 1 ] out_mode $end
      $var wire 1 ^ out_done $end
      $var wire 1 _ rotation_dir $end
      $var wire 32 ` shifted_x [31:0] $end
      $var wire 32 a shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[14] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 d# STEP [31:0] $end
      $var wire 32 e# SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 X in_target_angle [31:0] $end
      $var wire 33 Y in_current_angle [32:0] $end
      $var wire 32 [ in_x [31:0] $end
      $var wire 32 \ in_y [31:0] $end
      $var wire 1 ] in_mode $end
      $var wire 1 ^ in_done $end
      $var wire 32 b out_target_angle [31:0] $end
      $var wire 33 c out_current_angle [32:0] $end
      $var wire 32 e out_x [31:0] $end
      $var wire 32 f out_y [31:0] $end
      $var wire 1 g out_mode $end
      $var wire 1 h out_done $end
      $var wire 1 i rotation_dir $end
      $var wire 32 j shifted_x [31:0] $end
      $var wire 32 k shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[15] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 f# STEP [31:0] $end
      $var wire 32 g# SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 b in_target_angle [31:0] $end
      $var wire 33 c in_current_angle [32:0] $end
      $var wire 32 e in_x [31:0] $end
      $var wire 32 f in_y [31:0] $end
      $var wire 1 g in_mode $end
      $var wire 1 h in_done $end
      $var wire 32 l out_target_angle [31:0] $end
      $var wire 33 m out_current_angle [32:0] $end
      $var wire 32 o out_x [31:0] $end
      $var wire 32 p out_y [31:0] $end
      $var wire 1 q out_mode $end
      $var wire 1 r out_done $end
      $var wire 1 s rotation_dir $end
      $var wire 32 t shifted_x [31:0] $end
      $var wire 32 u shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[16] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 h# STEP [31:0] $end
      $var wire 32 i# SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 l in_target_angle [31:0] $end
      $var wire 33 m in_current_angle [32:0] $end
      $var wire 32 o in_x [31:0] $end
      $var wire 32 p in_y [31:0] $end
      $var wire 1 q in_mode $end
      $var wire 1 r in_done $end
      $var wire 32 v out_target_angle [31:0] $end
      $var wire 33 w out_current_angle [32:0] $end
      $var wire 32 y out_x [31:0] $end
      $var wire 32 z out_y [31:0] $end
      $var wire 1 { out_mode $end
      $var wire 1 | out_done $end
      $var wire 1 } rotation_dir $end
      $var wire 32 ~ shifted_x [31:0] $end
      $var wire 32 !! shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[17] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 j# STEP [31:0] $end
      $var wire 32 k# SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 v in_target_angle [31:0] $end
      $var wire 33 w in_current_angle [32:0] $end
      $var wire 32 y in_x [31:0] $end
      $var wire 32 z in_y [31:0] $end
      $var wire 1 { in_mode $end
      $var wire 1 | in_done $end
      $var wire 32 "! out_target_angle [31:0] $end
      $var wire 33 #! out_current_angle [32:0] $end
      $var wire 32 %! out_x [31:0] $end
      $var wire 32 &! out_y [31:0] $end
      $var wire 1 '! out_mode $end
      $var wire 1 (! out_done $end
      $var wire 1 )! rotation_dir $end
      $var wire 32 *! shifted_x [31:0] $end
      $var wire 32 +! shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[18] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 l# STEP [31:0] $end
      $var wire 32 m# SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 "! in_target_angle [31:0] $end
      $var wire 33 #! in_current_angle [32:0] $end
      $var wire 32 %! in_x [31:0] $end
      $var wire 32 &! in_y [31:0] $end
      $var wire 1 '! in_mode $end
      $var wire 1 (! in_done $end
      $var wire 32 ,! out_target_angle [31:0] $end
      $var wire 33 -! out_current_angle [32:0] $end
      $var wire 32 /! out_x [31:0] $end
      $var wire 32 0! out_y [31:0] $end
      $var wire 1 1! out_mode $end
      $var wire 1 2! out_done $end
      $var wire 1 3! rotation_dir $end
      $var wire 32 4! shifted_x [31:0] $end
      $var wire 32 5! shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[19] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 n# STEP [31:0] $end
      $var wire 32 o# SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 ,! in_target_angle [31:0] $end
      $var wire 33 -! in_current_angle [32:0] $end
      $var wire 32 /! in_x [31:0] $end
      $var wire 32 0! in_y [31:0] $end
      $var wire 1 1! in_mode $end
      $var wire 1 2! in_done $end
      $var wire 32 6! out_target_angle [31:0] $end
      $var wire 33 7! out_current_angle [32:0] $end
      $var wire 32 9! out_x [31:0] $end
      $var wire 32 :! out_y [31:0] $end
      $var wire 1 ;! out_mode $end
      $var wire 1 <! out_done $end
      $var wire 1 =! rotation_dir $end
      $var wire 32 >! shifted_x [31:0] $end
      $var wire 32 ?! shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[1] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 p# STEP [31:0] $end
      $var wire 32 q# SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 , in_target_angle [31:0] $end
      $var wire 33 - in_current_angle [32:0] $end
      $var wire 32 / in_x [31:0] $end
      $var wire 32 0 in_y [31:0] $end
      $var wire 1 1 in_mode $end
      $var wire 1 2 in_done $end
      $var wire 32 @! out_target_angle [31:0] $end
      $var wire 33 A! out_current_angle [32:0] $end
      $var wire 32 C! out_x [31:0] $end
      $var wire 32 D! out_y [31:0] $end
      $var wire 1 E! out_mode $end
      $var wire 1 F! out_done $end
      $var wire 1 G! rotation_dir $end
      $var wire 32 H! shifted_x [31:0] $end
      $var wire 32 I! shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[20] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 r# STEP [31:0] $end
      $var wire 32 s# SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 6! in_target_angle [31:0] $end
      $var wire 33 7! in_current_angle [32:0] $end
      $var wire 32 9! in_x [31:0] $end
      $var wire 32 :! in_y [31:0] $end
      $var wire 1 ;! in_mode $end
      $var wire 1 <! in_done $end
      $var wire 32 J! out_target_angle [31:0] $end
      $var wire 33 K! out_current_angle [32:0] $end
      $var wire 32 M! out_x [31:0] $end
      $var wire 32 N! out_y [31:0] $end
      $var wire 1 O! out_mode $end
      $var wire 1 P! out_done $end
      $var wire 1 Q! rotation_dir $end
      $var wire 32 R! shifted_x [31:0] $end
      $var wire 32 S! shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[21] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 t# STEP [31:0] $end
      $var wire 32 u# SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 J! in_target_angle [31:0] $end
      $var wire 33 K! in_current_angle [32:0] $end
      $var wire 32 M! in_x [31:0] $end
      $var wire 32 N! in_y [31:0] $end
      $var wire 1 O! in_mode $end
      $var wire 1 P! in_done $end
      $var wire 32 T! out_target_angle [31:0] $end
      $var wire 33 U! out_current_angle [32:0] $end
      $var wire 32 W! out_x [31:0] $end
      $var wire 32 X! out_y [31:0] $end
      $var wire 1 Y! out_mode $end
      $var wire 1 Z! out_done $end
      $var wire 1 [! rotation_dir $end
      $var wire 32 \! shifted_x [31:0] $end
      $var wire 32 ]! shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[22] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 v# STEP [31:0] $end
      $var wire 32 w# SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 T! in_target_angle [31:0] $end
      $var wire 33 U! in_current_angle [32:0] $end
      $var wire 32 W! in_x [31:0] $end
      $var wire 32 X! in_y [31:0] $end
      $var wire 1 Y! in_mode $end
      $var wire 1 Z! in_done $end
      $var wire 32 ^! out_target_angle [31:0] $end
      $var wire 33 _! out_current_angle [32:0] $end
      $var wire 32 a! out_x [31:0] $end
      $var wire 32 b! out_y [31:0] $end
      $var wire 1 c! out_mode $end
      $var wire 1 d! out_done $end
      $var wire 1 e! rotation_dir $end
      $var wire 32 f! shifted_x [31:0] $end
      $var wire 32 g! shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[23] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 x# STEP [31:0] $end
      $var wire 32 y# SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 ^! in_target_angle [31:0] $end
      $var wire 33 _! in_current_angle [32:0] $end
      $var wire 32 a! in_x [31:0] $end
      $var wire 32 b! in_y [31:0] $end
      $var wire 1 c! in_mode $end
      $var wire 1 d! in_done $end
      $var wire 32 h! out_target_angle [31:0] $end
      $var wire 33 i! out_current_angle [32:0] $end
      $var wire 32 k! out_x [31:0] $end
      $var wire 32 l! out_y [31:0] $end
      $var wire 1 m! out_mode $end
      $var wire 1 n! out_done $end
      $var wire 1 o! rotation_dir $end
      $var wire 32 p! shifted_x [31:0] $end
      $var wire 32 q! shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[24] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 z# STEP [31:0] $end
      $var wire 32 {# SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 h! in_target_angle [31:0] $end
      $var wire 33 i! in_current_angle [32:0] $end
      $var wire 32 k! in_x [31:0] $end
      $var wire 32 l! in_y [31:0] $end
      $var wire 1 m! in_mode $end
      $var wire 1 n! in_done $end
      $var wire 32 r! out_target_angle [31:0] $end
      $var wire 33 s! out_current_angle [32:0] $end
      $var wire 32 u! out_x [31:0] $end
      $var wire 32 v! out_y [31:0] $end
      $var wire 1 w! out_mode $end
      $var wire 1 x! out_done $end
      $var wire 1 y! rotation_dir $end
      $var wire 32 z! shifted_x [31:0] $end
      $var wire 32 {! shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[25] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 |# STEP [31:0] $end
      $var wire 32 }# SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 r! in_target_angle [31:0] $end
      $var wire 33 s! in_current_angle [32:0] $end
      $var wire 32 u! in_x [31:0] $end
      $var wire 32 v! in_y [31:0] $end
      $var wire 1 w! in_mode $end
      $var wire 1 x! in_done $end
      $var wire 32 |! out_target_angle [31:0] $end
      $var wire 33 }! out_current_angle [32:0] $end
      $var wire 32 !" out_x [31:0] $end
      $var wire 32 "" out_y [31:0] $end
      $var wire 1 #" out_mode $end
      $var wire 1 $" out_done $end
      $var wire 1 %" rotation_dir $end
      $var wire 32 &" shifted_x [31:0] $end
      $var wire 32 '" shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[26] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 s# STEP [31:0] $end
      $var wire 32 ~# SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 |! in_target_angle [31:0] $end
      $var wire 33 }! in_current_angle [32:0] $end
      $var wire 32 !" in_x [31:0] $end
      $var wire 32 "" in_y [31:0] $end
      $var wire 1 #" in_mode $end
      $var wire 1 $" in_done $end
      $var wire 32 (" out_target_angle [31:0] $end
      $var wire 33 )" out_current_angle [32:0] $end
      $var wire 32 +" out_x [31:0] $end
      $var wire 32 ," out_y [31:0] $end
      $var wire 1 -" out_mode $end
      $var wire 1 ." out_done $end
      $var wire 1 /" rotation_dir $end
      $var wire 32 0" shifted_x [31:0] $end
      $var wire 32 1" shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[27] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 ]# STEP [31:0] $end
      $var wire 32 !$ SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 (" in_target_angle [31:0] $end
      $var wire 33 )" in_current_angle [32:0] $end
      $var wire 32 +" in_x [31:0] $end
      $var wire 32 ," in_y [31:0] $end
      $var wire 1 -" in_mode $end
      $var wire 1 ." in_done $end
      $var wire 32 2" out_target_angle [31:0] $end
      $var wire 33 3" out_current_angle [32:0] $end
      $var wire 32 5" out_x [31:0] $end
      $var wire 32 6" out_y [31:0] $end
      $var wire 1 7" out_mode $end
      $var wire 1 8" out_done $end
      $var wire 1 9" rotation_dir $end
      $var wire 32 :" shifted_x [31:0] $end
      $var wire 32 ;" shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[28] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 "$ STEP [31:0] $end
      $var wire 32 #$ SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 2" in_target_angle [31:0] $end
      $var wire 33 3" in_current_angle [32:0] $end
      $var wire 32 5" in_x [31:0] $end
      $var wire 32 6" in_y [31:0] $end
      $var wire 1 7" in_mode $end
      $var wire 1 8" in_done $end
      $var wire 32 <" out_target_angle [31:0] $end
      $var wire 33 =" out_current_angle [32:0] $end
      $var wire 32 ?" out_x [31:0] $end
      $var wire 32 @" out_y [31:0] $end
      $var wire 1 A" out_mode $end
      $var wire 1 B" out_done $end
      $var wire 1 C" rotation_dir $end
      $var wire 32 D" shifted_x [31:0] $end
      $var wire 32 E" shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[29] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 $$ STEP [31:0] $end
      $var wire 32 %$ SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 <" in_target_angle [31:0] $end
      $var wire 33 =" in_current_angle [32:0] $end
      $var wire 32 ?" in_x [31:0] $end
      $var wire 32 @" in_y [31:0] $end
      $var wire 1 A" in_mode $end
      $var wire 1 B" in_done $end
      $var wire 32 F" out_target_angle [31:0] $end
      $var wire 33 G" out_current_angle [32:0] $end
      $var wire 32 I" out_x [31:0] $end
      $var wire 32 J" out_y [31:0] $end
      $var wire 1 K" out_mode $end
      $var wire 1 L" out_done $end
      $var wire 1 M" rotation_dir $end
      $var wire 32 N" shifted_x [31:0] $end
      $var wire 32 O" shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[2] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 &$ STEP [31:0] $end
      $var wire 32 '$ SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 @! in_target_angle [31:0] $end
      $var wire 33 A! in_current_angle [32:0] $end
      $var wire 32 C! in_x [31:0] $end
      $var wire 32 D! in_y [31:0] $end
      $var wire 1 E! in_mode $end
      $var wire 1 F! in_done $end
      $var wire 32 P" out_target_angle [31:0] $end
      $var wire 33 Q" out_current_angle [32:0] $end
      $var wire 32 S" out_x [31:0] $end
      $var wire 32 T" out_y [31:0] $end
      $var wire 1 U" out_mode $end
      $var wire 1 V" out_done $end
      $var wire 1 W" rotation_dir $end
      $var wire 32 X" shifted_x [31:0] $end
      $var wire 32 Y" shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[30] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 q# STEP [31:0] $end
      $var wire 32 ($ SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 F" in_target_angle [31:0] $end
      $var wire 33 G" in_current_angle [32:0] $end
      $var wire 32 I" in_x [31:0] $end
      $var wire 32 J" in_y [31:0] $end
      $var wire 1 K" in_mode $end
      $var wire 1 L" in_done $end
      $var wire 32 Z" out_target_angle [31:0] $end
      $var wire 33 [" out_current_angle [32:0] $end
      $var wire 32 ]" out_x [31:0] $end
      $var wire 32 ^" out_y [31:0] $end
      $var wire 1 _" out_mode $end
      $var wire 1 `" out_done $end
      $var wire 1 a" rotation_dir $end
      $var wire 32 b" shifted_x [31:0] $end
      $var wire 32 c" shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[31] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 q# STEP [31:0] $end
      $var wire 32 )$ SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 Z" in_target_angle [31:0] $end
      $var wire 33 [" in_current_angle [32:0] $end
      $var wire 32 ]" in_x [31:0] $end
      $var wire 32 ^" in_y [31:0] $end
      $var wire 1 _" in_mode $end
      $var wire 1 `" in_done $end
      $var wire 32 d" out_target_angle [31:0] $end
      $var wire 33 * out_current_angle [32:0] $end
      $var wire 32 ) out_x [31:0] $end
      $var wire 32 & out_y [31:0] $end
      $var wire 1 e" out_mode $end
      $var wire 1 ' out_done $end
      $var wire 1 f" rotation_dir $end
      $var wire 32 g" shifted_x [31:0] $end
      $var wire 32 h" shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[3] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 *$ STEP [31:0] $end
      $var wire 32 $$ SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 P" in_target_angle [31:0] $end
      $var wire 33 Q" in_current_angle [32:0] $end
      $var wire 32 S" in_x [31:0] $end
      $var wire 32 T" in_y [31:0] $end
      $var wire 1 U" in_mode $end
      $var wire 1 V" in_done $end
      $var wire 32 i" out_target_angle [31:0] $end
      $var wire 33 j" out_current_angle [32:0] $end
      $var wire 32 l" out_x [31:0] $end
      $var wire 32 m" out_y [31:0] $end
      $var wire 1 n" out_mode $end
      $var wire 1 o" out_done $end
      $var wire 1 p" rotation_dir $end
      $var wire 32 q" shifted_x [31:0] $end
      $var wire 32 r" shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[4] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 +$ STEP [31:0] $end
      $var wire 32 ,$ SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 i" in_target_angle [31:0] $end
      $var wire 33 j" in_current_angle [32:0] $end
      $var wire 32 l" in_x [31:0] $end
      $var wire 32 m" in_y [31:0] $end
      $var wire 1 n" in_mode $end
      $var wire 1 o" in_done $end
      $var wire 32 s" out_target_angle [31:0] $end
      $var wire 33 t" out_current_angle [32:0] $end
      $var wire 32 v" out_x [31:0] $end
      $var wire 32 w" out_y [31:0] $end
      $var wire 1 x" out_mode $end
      $var wire 1 y" out_done $end
      $var wire 1 z" rotation_dir $end
      $var wire 32 {" shifted_x [31:0] $end
      $var wire 32 |" shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[5] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 -$ STEP [31:0] $end
      $var wire 32 "$ SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 s" in_target_angle [31:0] $end
      $var wire 33 t" in_current_angle [32:0] $end
      $var wire 32 v" in_x [31:0] $end
      $var wire 32 w" in_y [31:0] $end
      $var wire 1 x" in_mode $end
      $var wire 1 y" in_done $end
      $var wire 32 }" out_target_angle [31:0] $end
      $var wire 33 ~" out_current_angle [32:0] $end
      $var wire 32 "# out_x [31:0] $end
      $var wire 32 ## out_y [31:0] $end
      $var wire 1 $# out_mode $end
      $var wire 1 %# out_done $end
      $var wire 1 &# rotation_dir $end
      $var wire 32 '# shifted_x [31:0] $end
      $var wire 32 (# shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[6] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 .$ STEP [31:0] $end
      $var wire 32 /$ SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 }" in_target_angle [31:0] $end
      $var wire 33 ~" in_current_angle [32:0] $end
      $var wire 32 "# in_x [31:0] $end
      $var wire 32 ## in_y [31:0] $end
      $var wire 1 $# in_mode $end
      $var wire 1 %# in_done $end
      $var wire 32 )# out_target_angle [31:0] $end
      $var wire 33 *# out_current_angle [32:0] $end
      $var wire 32 ,# out_x [31:0] $end
      $var wire 32 -# out_y [31:0] $end
      $var wire 1 .# out_mode $end
      $var wire 1 /# out_done $end
      $var wire 1 0# rotation_dir $end
      $var wire 32 1# shifted_x [31:0] $end
      $var wire 32 2# shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[7] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 0$ STEP [31:0] $end
      $var wire 32 1$ SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 )# in_target_angle [31:0] $end
      $var wire 33 *# in_current_angle [32:0] $end
      $var wire 32 ,# in_x [31:0] $end
      $var wire 32 -# in_y [31:0] $end
      $var wire 1 .# in_mode $end
      $var wire 1 /# in_done $end
      $var wire 32 3# out_target_angle [31:0] $end
      $var wire 33 4# out_current_angle [32:0] $end
      $var wire 32 6# out_x [31:0] $end
      $var wire 32 7# out_y [31:0] $end
      $var wire 1 8# out_mode $end
      $var wire 1 9# out_done $end
      $var wire 1 :# rotation_dir $end
      $var wire 32 ;# shifted_x [31:0] $end
      $var wire 32 <# shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[8] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 2$ STEP [31:0] $end
      $var wire 32 3$ SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 3# in_target_angle [31:0] $end
      $var wire 33 4# in_current_angle [32:0] $end
      $var wire 32 6# in_x [31:0] $end
      $var wire 32 7# in_y [31:0] $end
      $var wire 1 8# in_mode $end
      $var wire 1 9# in_done $end
      $var wire 32 =# out_target_angle [31:0] $end
      $var wire 33 ># out_current_angle [32:0] $end
      $var wire 32 @# out_x [31:0] $end
      $var wire 32 A# out_y [31:0] $end
      $var wire 1 B# out_mode $end
      $var wire 1 C# out_done $end
      $var wire 1 D# rotation_dir $end
      $var wire 32 E# shifted_x [31:0] $end
      $var wire 32 F# shifted_y [31:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1[9] $end
     $scope module cordic_stage_i $end
      $var wire 32 Q# BIT_WIDTH [31:0] $end
      $var wire 32 4$ STEP [31:0] $end
      $var wire 32 5$ SHIFT_NUM [31:0] $end
      $var wire 1 J# clk $end
      $var wire 1 K# reset $end
      $var wire 1 N# start $end
      $var wire 32 =# in_target_angle [31:0] $end
      $var wire 33 ># in_current_angle [32:0] $end
      $var wire 32 @# in_x [31:0] $end
      $var wire 32 A# in_y [31:0] $end
      $var wire 1 B# in_mode $end
      $var wire 1 C# in_done $end
      $var wire 32 3 out_target_angle [31:0] $end
      $var wire 33 4 out_current_angle [32:0] $end
      $var wire 32 6 out_x [31:0] $end
      $var wire 32 7 out_y [31:0] $end
      $var wire 1 8 out_mode $end
      $var wire 1 9 out_done $end
      $var wire 1 G# rotation_dir $end
      $var wire 32 H# shifted_x [31:0] $end
      $var wire 32 I# shifted_y [31:0] $end
     $upscope $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#46450
1#
0$
b10011000000110101001011001110100 %
b10011000000110101001011001110100 &
0'
b10000000000000000000000000000000 (
b10101011101011111001010101111011 )
b110000000000000000000000000000000 *
b10000000000000000000000000000000 ,
b111000000000000000000000000000000 -
b10100101011111011100000110111000 /
b01011010100000100011111001001000 0
01
02
b10000000000000000000000000000000 3
b110000000000110000111011000001100 4
b10101011110011101100110011100010 6
b10011000000000010101000000101111 7
08
09
b10000000000000000000000000000000 :
b110000000000001000001011011011100 ;
b10101011101101001100110100110110 =
b10011000000101100101110001111100 >
0?
0@
1A
b11111111111010101111001110110011 B
b11111111111001100000000001010100 C
b10000000000000000000000000000000 D
b101111111111110011110011101000100 E
b10101011101001111101000000000001 G
b10011000001000001110010111100011 H
0I
0J
1K
b11111111111101010111011010011001 L
b11111111111100110000001011001011 M
b10000000000000000000000000000000 N
b101111111111111101111111100010000 O
b10101011101011100100110111110011 Q
b10011000000110111010000001100000 R
0S
0T
0U
b11111111111110101011101001111101 V
b11111111111110011000001000001110 W
b10000000000000000000000000000000 X
b110000000000000011000101011110110 Y
b10101011101100011000110100010110 [
b10011000000110001111110111010010 \
0]
0^
0_
b11111111111111010101110101110010 `
b11111111111111001100000011011101 a
b10000000000000000000000000000000 b
b110000000000000000100010100000011 c
b10101011101011111110110101111001 e
b10011000000110100100111100001100 f
0g
0h
1i
b11111111111111101010111011000110 j
b11111111111111100110000001100011 k
b10000000000000000000000000000000 l
b101111111111111111010001000001001 m
b10101011101011110001110110101101 o
b10011000000110101111011110101101 p
0q
0r
1s
b11111111111111110101011101011111 t
b11111111111111110011000000110100 u
b10000000000000000000000000000000 v
b101111111111111111111001110000110 w
b10101011101011111000010110010011 y
b10011000000110101010001101011100 z
0{
0|
0}
b11111111111111111010101110101111 ~
b11111111111111111001100000011010 !!
b10000000000000000000000000000000 "!
b110000000000000000001110001000100 #!
b10101011101011111011100110000110 %!
b10011000000110100111100100110011 &!
0'!
0(!
0)!
b11111111111111111101010111010111 *!
b11111111111111111100110000001101 +!
b10000000000000000000000000000000 ,!
b110000000000000000000011111100101 -!
b10101011101011111001111110001100 /!
b10011000000110101000111001001000 0!
01!
02!
13!
b11111111111111111110101011101011 4!
b11111111111111111110011000000110 5!
b10000000000000000000000000000000 6!
b101111111111111111111110110110101 7!
b10101011101011111001001010001111 9!
b10011000000110101001100011010011 :!
0;!
0<!
1=!
b11111111111111111111010101110101 >!
b11111111111111111111001100000011 ?!
b10000000000000000000000000000000 @!
b110011010001101111111010111000101 A!
b11010010101111101110000011011100 C!
b10000111110000110101110101101100 D!
0E!
0F!
1G!
b11010010101111101110000011011100 H!
b00101101010000010001111100100100 I!
b10000000000000000000000000000000 J!
b110000000000000000000001011001101 K!
b10101011101011111001100100001110 M!
b10011000000110101001001110001101 N!
0O!
0P!
0Q!
b11111111111111111111101010111010 R!
b11111111111111111111100110000001 S!
b10000000000000000000000000000000 T!
b110000000000000000000000001000001 U!
b10101011101011111001010111001110 W!
b10011000000110101001011000110000 X!
0Y!
0Z!
1[!
b11111111111111111111110101011101 \!
b11111111111111111111110011000000 ]!
b10000000000000000000000000000000 ^!
b101111111111111111111111011111011 _!
b10101011101011111001010000101110 a!
b10011000000110101001011110000010 b!
0c!
0d!
1e!
b11111111111111111111111010101110 f!
b11111111111111111111111001100000 g!
b10000000000000000000000000000000 h!
b101111111111111111111111110011110 i!
b10101011101011111001010011111110 k!
b10011000000110101001011011011001 l!
0m!
0n!
0o!
b11111111111111111111111101010111 p!
b11111111111111111111111100110000 q!
b10000000000000000000000000000000 r!
b101111111111111111111111111101111 s!
b10101011101011111001010101100110 u!
b10011000000110101001011010000100 v!
0w!
0x!
0y!
b11111111111111111111111110101011 z!
b11111111111111111111111110011000 {!
b10000000000000000000000000000000 |!
b110000000000000000000000000011000 }!
b10101011101011111001010110011010 !"
b10011000000110101001011001011001 ""
0#"
0$"
0%"
b11111111111111111111111111010101 &"
b11111111111111111111111111001100 '"
b10000000000000000000000000000000 ("
b110000000000000000000000000000100 )"
b10101011101011111001010110000000 +"
b10011000000110101001011001101111 ,"
0-"
0."
1/"
b11111111111111111111111111101010 0"
b11111111111111111111111111100110 1"
b10000000000000000000000000000000 2"
b101111111111111111111111111111010 3"
b10101011101011111001010101110011 5"
b10011000000110101001011001111010 6"
07"
08"
19"
b11111111111111111111111111110101 :"
b11111111111111111111111111110011 ;"
b10000000000000000000000000000000 <"
b101111111111111111111111111111111 ="
b10101011101011111001010101111010 ?"
b10011000000110101001011001110100 @"
0A"
0B"
0C"
b11111111111111111111111111111010 D"
b11111111111111111111111111111001 E"
b10000000000000000000000000000000 F"
b110000000000000000000000000000010 G"
b10101011101011111001010101111110 I"
b10011000000110101001011001110001 J"
0K"
0L"
0M"
b11111111111111111111111111111101 N"
b11111111111111111111111111111100 O"
b10000000000000000000000000000000 P"
b110000110010000011000010100001110 Q"
b10110100101011111011100000110111 S"
b10010011000100111010010100110101 T"
0U"
0V"
1W"
b11110100101011111011100000110111 X"
b11100001111100001101011101011011 Y"
b10000000000000000000000000000000 Z"
b110000000000000000000000000000001 ["
b10101011101011111001010101111100 ]"
b10011000000110101001011001110011 ^"
0_"
0`"
1a"
b11111111111111111111111111111110 b"
b11111111111111111111111111111110 c"
b10000000000000000000000000000000 d"
0e"
1f"
b11111111111111111111111111111111 g"
b11111111111111111111111111111111 h"
b10000000000000000000000000000000 i"
b101111100000111110110000101100110 j"
b10100111000100100010110011011101 l"
b10011100011111011010111000101111 m"
0n"
0o"
1p"
b11110110100101011111011100000110 q"
b11110010011000100111010010100110 r"
b10000000000000000000000000000000 s"
b110000001001101010111101111101100 t"
b10101101010010100101000111111011 v"
b10010110111011101101000011111100 w"
0x"
0y"
0z"
b11111010011100010010001011001101 {"
b11111001110001111101101011100010 |"
b10000000000000000000000000000000 }"
b101111110101010011100110000101001 ~"
b10101010000000011100100010000010 "#
b10011001100001000111111001101101 ##
0$#
0%#
1&#
b11111101011010100101001010001111 '#
b11111100101101110111011010000111 (#
b10000000000000000000000000000000 )#
b101111111111011111011100001100110 *#
b10101011100110111011011010001001 ,#
b10011000001011001000010110001111 -#
0.#
0/#
00#
b11111110101010000000011100100010 1#
b11111110011001100001000111111001 2#
b10000000000000000000000000000000 3#
b110000000100100101011000100010000 4#
b10101100011010110101110101111110 6#
b10010111100000111011110011111100 7#
08#
09#
0:#
b11111111010101110011011101101101 ;#
b11111111001100000101100100001011 <#
b10000000000000000000000000000000 =#
b110000000010000010011010001101001 >#
b10101100000000101110000100111010 @#
b10010111110101110101000110011111 A#
0B#
0C#
1D#
b11111111101011000110101101011101 E#
b11111111100101111000001110111100 F#
1G#
b11111111110101100000000101110000 H#
b11111111110010111110101110101000 I#
1J#
0K#
0L#
b10000000000000000000000000000000 M#
1N#
1O#
b00000000000000000000000001100100 P#
b00000000000000000000000000100000 Q#
b10100101011111011100000110111000 R#
1S#
0T#
b10100101011111011100000110111000 U#
b00000000000000000000000000000000 V#
r3.14159265359 W#
b01000000000000000000000000000000 Y#
b000000000000000000000000000000000 Z#
b00000000000101000101111100110000 \#
b00000000000000000000000000001010 ]#
b00000000000010100010111110011000 ^#
b00000000000000000000000000001011 _#
b00000000000001010001011111001100 `#
b00000000000000000000000000001100 a#
b00000000000000101000101111100110 b#
b00000000000000000000000000001101 c#
b00000000000000010100010111110011 d#
b00000000000000000000000000001110 e#
b00000000000000001010001011111010 f#
b00000000000000000000000000001111 g#
b00000000000000000101000101111101 h#
b00000000000000000000000000010000 i#
b00000000000000000010100010111110 j#
b00000000000000000000000000010001 k#
b00000000000000000001010001011111 l#
b00000000000000000000000000010010 m#
b00000000000000000000101000110000 n#
b00000000000000000000000000010011 o#
b00100101110010000000101000111011 p#
b00000000000000000000000000000001 q#
b00000000000000000000010100011000 r#
b00000000000000000000000000010100 s#
b00000000000000000000001010001100 t#
b00000000000000000000000000010101 u#
b00000000000000000000000101000110 v#
b00000000000000000000000000010110 w#
b00000000000000000000000010100011 x#
b00000000000000000000000000010111 y#
b00000000000000000000000001010001 z#
b00000000000000000000000000011000 {#
b00000000000000000000000000101001 |#
b00000000000000000000000000011001 }#
b00000000000000000000000000011010 ~#
b00000000000000000000000000011011 !$
b00000000000000000000000000000101 "$
b00000000000000000000000000011100 #$
b00000000000000000000000000000011 $$
b00000000000000000000000000011101 %$
b00010011111101100111000010110111 &$
b00000000000000000000000000000010 '$
b00000000000000000000000000011110 ($
b00000000000000000000000000011111 )$
b00001010001000100010001110101000 *$
b00000101000101100001101010000110 +$
b00000000000000000000000000000100 ,$
b00000010100010111010111111000011 -$
b00000001010001011110110000111101 .$
b00000000000000000000000000000110 /$
b00000000101000101111100010101010 0$
b00000000000000000000000000000111 1$
b00000000010100010111110010100111 2$
b00000000000000000000000000001000 3$
b00000000001010001011111001011101 4$
b00000000000000000000000000001001 5$
r0.6072529350088812 6$
